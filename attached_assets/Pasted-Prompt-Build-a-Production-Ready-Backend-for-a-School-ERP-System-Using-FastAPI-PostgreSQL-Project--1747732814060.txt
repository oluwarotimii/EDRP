Prompt: Build a Production-Ready Backend for a School ERP System Using FastAPI & PostgreSQL
Project Overview
Build a scalable, secure, and maintainable backend API for a School ERP platform to support multi-school onboarding, user & role management, admissions, attendance with GPS verification, academic management, fee payments, communications, and reporting.

Technology Stack
Backend Framework: FastAPI (Python)

Database: PostgreSQL (with async support)

Authentication: OAuth2 with JWT tokens

File Storage: Cloudinary for images (school logos, profile photos, student photos)

Async Task Queue: (Optional) Celery or background tasks for emails/notifications

API Docs: OpenAPI / Swagger UI auto-generated by FastAPI

Deployment: Production-ready with environment variables, logging, error handling

Functional Requirements
1. Multi-School Onboarding & Configuration
Schools register with name, abbreviation, contact info, and logo (Cloudinary URL).

Admin configures school settings: admission number format, academic sessions, terms, departments, classes, subjects.

Manage subscription plans (free, premium, enterprise) with billing integration (Stripe or Paystack).

2. Role-Based User Management
Roles: School Super Admin, Admin Staff, Class Teacher, Subject Teacher, Non-Teaching Staff, Student, Parent.

Each role assigned fine-grained permissions for CRUD operations.

User profiles with optional profile photos.

Parent-child relationships.

Teachers linked to departments, classes, subjects.

3. Admissions & Enrollment
Admin/Admission officers admit students with personal info and photo upload.

Unique admission numbers generated based on configured format (e.g., ABBR/Year/Number).

Assign students to classes, departments, sessions, and link parents.

Student portal access with role-based permissions.

4. Attendance Management with GPS Verification
Admin sets authentic GPS locations (lat, long, radius) per school.

Teachers and students mark attendance with timestamp and GPS coordinates.

Backend verifies attendance location; flags or rejects if outside authentic zones.

Attendance statuses: Present, Absent, Late, Excused.

Attendance reports accessible by authorized roles.

Alerts for irregular attendance.

5. Academic Sessions, Assessments, and Results
Configurable academic sessions and terms.

Teachers record student scores per subject and assessment.

Auto-calculate totals, averages, and grades.

Generate downloadable report cards (PDF).

Manual or bulk import of results.

6. Fee Management & Payment Integration
Define multiple fee types per school.

Track student fees, payment statuses, and transaction references.

Parent dashboard for viewing dues and making payments via integrated gateways (Paystack).

Fee reports for admins.

7. Behavior & Discipline Reports
Teachers and admins submit behavior reports.

Parents and admins can view behavioral history.

Support communication on disciplinary actions.

8. Communication & Notifications
Internal messaging (direct & group chats).

Push notifications for attendance, fees, exams, and announcements.

Support attachments.

9. Security & Access Control
JWT-based authentication with role-based access control (RBAC).

Password hashing and email verification.

Audit logging of critical actions.

Data encryption where necessary.

Rate limiting and input validation.

10. Admin, Teacher, Parent & Student Dashboards
Overview statistics and actionable insights.

Export reports in CSV, Excel, PDF.

11. Cloudinary Integration
Store all images on Cloudinary.

Provide URLs in API responses.

Technical Requirements
Use async database operations with asyncpg or databases package.

Write database schemas using SQLAlchemy or Tortoise ORM with migrations.

Modular code structure (routers, services, models, schemas).

Automated tests (unit and integration).

API documentation with examples.

Logging and error handling middleware.

Environment-based configuration.

Dockerfile and docker-compose for local development and production.

Secure CORS configuration.

Database Schema (Brief)
schools (id, name, abbreviation, contact_info, logo_url, subscription_plan, created_at, updated_at)

users (id, school_id, role_id, name, email, hashed_password, profile_photo_url, created_at, updated_at)

roles (id, name, description)

permissions (id, name, description)

role_permissions (role_id, permission_id)

departments, classes, subjects

students (linked to user, admission_number, class_id, department_id, session_id)

parents_students (parent_id, student_id)

academic_sessions, terms

admissions

attendance_records (student_id, class_id, timestamp, status, latitude, longitude, flagged, flagged_reason, marked_by)

authentic_locations (school_id, latitude, longitude, radius_meters, active)

fee_types, student_fees, payments

behavior_reports

messages (for communication)

audit_logs

Deliverables
Complete FastAPI backend with RESTful API endpoints implementing all features.

PostgreSQL database with migrations.

Role-based permission enforcement on all routes.

GPS-based attendance verification logic.

Integration with Cloudinary for image upload management.

Payment gateway integration for fees.

Swagger/OpenAPI documentation.

Unit and integration tests covering core functionality.

Docker setup for deployment.

Clear README with setup, deployment, and API usage instructions.

Optional Enhancements (if time permits)
Background task processing for emails, notifications.

Real-time notifications using WebSockets.

Reporting dashboard analytics.

Multi-tenant architecture considerations.